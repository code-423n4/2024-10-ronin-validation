issue,title,primary finding,validator comment,status,root cause (URL),size,robotLabel
validation-260,Locking of funds inside `PoolInitializer` contract.,validation-128,,Satisfactory,,20,:robot:_primary
validation-212,Authorization Bypass Due to Expired Timestamp Check,validation-116,,Satisfactory,,20,:robot:_18_group
validation-213,Incorrect token transfers will be unexpected behaviors,validation-213,"Invalid, known issue [M-3](https://github.com/code-423n4/2024-10-ronin/blob/main/4naly3er-report.md#m-3--solmates-safetransferlib-does-not-check-for-token-contracts-existence)",Unsatisfactory,,21,:robot:_34_group
validation-165,The MixedQuoteRouter would never be able to quote prices ,validation-165,Relevant functionalities present [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/lens/MixedRouteQuoterV1.sol#L110-L193),Unsatisfactory,,21,:robot:_primary
validation-30,"Anyone can access initialize() becoming the owner of the contract, bypassing critical functions. ",validation-30,"Invalid, known issue [L-8](https://github.com/code-423n4/2024-10-ronin/blob/main/4naly3er-report.md#l-8-initializers-could-be-front-run)",Unsatisfactory,,21,:robot:_107_group
findings-4,Missing gap in KatanaV3Pool,findings-4,,Unsatisfactory,,21,
validation-245,Misuse of Constants.CONTRACT_BALANCE as Input can lead to undesired fund flows and contract misbehavior,validation-245,,Unsatisfactory,,23,:robot:_primary
validation-66,Vulnerable Proxy Logic in KatanaV3PoolProxy.sol,validation-66,,Unsatisfactory,,23,:robot:_05_group
validation-247,Arbitrary Token Transfers without Validation  can lead to contract misbehavior or stuck funds.,validation-247,safe ERC20 operations are utilized accordingly within the `Payments.sol` contract,Unsatisfactory,,24,:robot:_primary
validation-205,Gas Limit and Looping vulnerability which can result to Denial of Service,validation-205,"Insufficient quality. Additionally, I don't see any loop when performing a withdrawal from the WETH contract, which in itself is OOS",Unsatisfactory,,24,:robot:_16_group
validation-204,Reentrancy vulnerability could lead to potentially draining of funds ,validation-204,"Invalid, reentrancy is not possible since there is the appropriate `isNotLocked/lock` modifier. Additionally, all issues lack concrete proof",Unsatisfactory,,24,:robot:_26_group
validation-69,Insufficient Flash Loan Protections in KatanaV3Pool.sol,validation-69,,Unsatisfactory,,24,:robot:_01_group
validation-68,Lack of Ownership Transfer Control in KatanaV3Factory.sol,validation-68,"Known issue, per code comments, `admin` is treated [as immutable](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Factory.sol#L57)",Unsatisfactory,,24,:robot:_primary
validation-243,Missing access Control over `initialize` function.,validation-30,,Unsatisfactory,,25,:robot:_primary
validation-192,Potential for misuse of the map Function can lead to funds being sent to the wrong address or unauthorized actions being taken.,validation-192,,Unsatisfactory,,25,:robot:_45_group
validation-158,function `v2SwapExactInput` has a missing deadline parameter,,"Invalid, deadline is present in the `AggregateRouter.sol` execute function [here](https://github.com/ronin-chain/katana-operation-contracts/blob/27f9d28e00958bf3494fa405a8a5acdcd5ecdc5d/src/aggregate-router/AggregateRouter.sol#L31), which is the main entry point that calls into dispatcher dispatch function ",Unsatisfactory,,25,:robot:_primary
validation-244,Reentrancy vulnerability can lead to unauthorized fund withdrawals and loss of contract assets.,validation-204,,Unsatisfactory,,26,:robot:_26_group
validation-235,"Potential Misuse of Hardcoded Constants (ADDR_SIZE, V3_FEE_SIZE, V3_POP_OFFSET) which can lead to incorrect logic or data misinterpretations",validation-235,,Unsatisfactory,,26,:robot:_primary
validation-201," Lack of Input Validation could lead to executing unintended commands, resulting in financial losses.",validation-201,IAggregateRouter.sol is OOS. ,Unsatisfactory,,26,:robot:_00_group
validation-103,`v3SwapRouter` is vulnerable to address collision,validation-51,,Satisfactory,,27,:robot:_37_group
validation-203,Lack of Access Control in deposit and withdraw Functions could lead to financial Loss and DoS,validation-203,"WETH contract is OOS, and the deposit and withdrawal are gated to the caller represented by `msg.sender`, users cannot call in place of  any arbitrary user",Unsatisfactory,,27,:robot:_23_group
validation-200,Transaction Expiration leading to potential confusion and financial discrepancies.,validation-200,"IAggregateRouter is OOS, and the deadline checks are checked appropriately via the [`checkDeadline` modifier](https://github.com/ronin-chain/katana-operation-contracts/blob/27f9d28e00958bf3494fa405a8a5acdcd5ecdc5d/src/aggregate-router/AggregateRouter.sol#L13-L16)",Unsatisfactory,,27,:robot:_primary
validation-191,Visibility of internal state variables leading to unauthorized actions,validation-191,There is no impact here whether or not `lockedBy` is private of public since it is simply used a reentrancy protection via the `isNotLocked` modifier ,Unsatisfactory,,27,:robot:_primary
validation-187,Authorization Bypass in Permit Functions could result in unauthorized transfers or allowance abuse.,validation-187,The necessary checks are performed within the `AllowanceTransfer` permit contract it cannot be performed arbitrarily,Unsatisfactory,,27,:robot:_primary
validation-184,Improper access control that can lead to potential fund loss or privilege escalation,validation-184,"There is no issue with dipatch being permisionless. It is the reponsibility of users to enter relevant inputs. More specifically, they are encouraged to use the AggregateRouter instead.",Unsatisfactory,,27,:robot:_23_group
validation-182,Unchecked external call failures resulting in potential fund loss or unexpected behavior.,validation-182,"Invalid, safe ERC20 operations are utilized accordingly within the `Payments.sol` contract",Unsatisfactory,,28,:robot:_34_group
validation-27,[H-1] Funds locked in contract that has payable functions but no `withdraw` function,validation-27,"Invalid/Informational/Low, known issue [L-7](https://github.com/code-423n4/2024-10-ronin/blob/main/4naly3er-report.md#l-7-empty-receivepayable-fallback-function-does-not-authenticate-requests). Additionally, users are responsible for performing swaps appropriately, and can utilize `sweep` via a multicall to clawback excess funds.",Unsatisfactory,,28,:robot:_21_group
validation-102,Use of `slot0` to get `sqrtPriceX96` can lead to price manipulation.,validation-102,"Likely invalid and OOS per [contest details](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues). This is likely a known uniswapv3 issue: 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3.' Many issues lack sufficient description of the issue as well, e.g. #178, #47",Satisfactory,,29,:robot:_03_group
validation-196,Potential Misuse of Governance Address,validation-196,This function does not exist,Unsatisfactory,,29,:robot:_primary
validation-186,Balance Manipulation in BALANCE_CHECK_ERC20 leading to unauthorized operations or bypassing intended validations.,validation-186,OOS per [here](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#erc20-token-behaviors-in-scope),Unsatisfactory,,29,:robot:_102_group
validation-67,Unsecured Position Handling in NonfungiblePositionManager.sol,,,Unsatisfactory,,29,:robot:_primary
validation-128,ETH Dust Accumulation in `createAndInitializePoolIfNecessary`,validation-128,"Would require user error, QA/low could be more appropriate",Satisfactory,,30,:robot:_24_group
validation-209,Unrestricted command execution could lead to malicious actions by unauthorized actors.,,,Unsatisfactory,,30,:robot:_primary
validation-197,Lack of event emission making debugging and monitoring difficult ,validation-197,This function does not exist,Unsatisfactory,,30,:robot:_primary
validation-189,Locked State Bypass which can lead to unexpected behavior and could allow unauthorized actions to be performed,validation-189,,Unsatisfactory,,30,:robot:_35_group
validation-183,Insufficient input validation may lead to loss of funds due to invalid or malicious input data.,validation-183,,Satisfactory,,30,:robot:_00_group
validation-202,Error Handling making debugging more difficult,validation-202,IAggregateRouter is OOS. The declared errors are utilized in `AggregateRouter.sol` appropriately,Unsatisfactory,,31,:robot:_primary
validation-194,Lack of access control can lead to unauthorized changes to critical addresses.,validation-194,This function does not exist,Unsatisfactory,,31,:robot:_12_group
validation-174, Precision Loss in `getAmountOut` Function Leads to Incorrect Price Calculations,validation-174,"Likely Informational/QA, the values used seems unrealistic and not accounted for scaled up decimals. Additionally uniswap uses similar logic as seen [here](https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/libraries/UniswapV2Library.sol#L43-L50)",Satisfactory,,32,:robot:_primary
validation-111, Missing `address(0)` while initializing the `PeripheryImmutableState` in his constructor.,validation-111,"Note, this are not present in the automated finding report for known issues. Grouping all address(0) input validation checks together. They should all likely be at most QA and argubly invalid based on the following [READ.ME information](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues): ' Centralization risk. Sky Mavis is responsible for maintaining the Katana V3 contracts and will able to upgrade the contract if necessary, as well as specify additional fee tiers.'  #101 would require a user error. ",Satisfactory,,32,:robot:_primary
validation-228,"Potential Ambiguity with MSG_SENDER and ADDRESS_THIS Flags could lead to unauthorized access, improper transaction routing, or ambiguous transfer flows.",validation-228,,Unsatisfactory,,32,:robot:_primary
validation-222,ETH Address (address(0)) Flagging Issue  could lead to loss of funds,validation-222,Don't see the issue using address zero as a flag to represent ETH,Unsatisfactory,,32,:robot:_primary
validation-214,Lock modifier can be bypassed thereby allowing reentrancy by proxy call of flash function,,,Unsatisfactory,,32,:robot:_01_group
validation-195,No Validations on Addresses could lead to loss of funds or non-functional contract features,,,Unsatisfactory,,32,:robot:_12_group
validation-55,Update solc version and use `unchecked` in Uniswap related libraries,,,Unsatisfactory,,32,:robot:_primary
validation-140,Incorrect handling of Fee Accounting,validation-140,"This seems invalid, the feeGrowthGlobal tracks the fees minus the flashloan fees transferred to the treasury.",Satisfactory,,33,:robot:_primary
validation-230,"Missing ETH Withdrawal Function in `AggregateRouter.sol` Contract, Causing Potential Funds Lock",validation-27,,Unsatisfactory,,33,:robot:_21_group
validation-215,"Misuse of CONTRACT_BALANCE as an input source could potentially allow unauthorized transactions, fund withdrawals, or unintended access.",validation-215,Insufficient proof,Unsatisfactory,,33,:robot:_102_group
validation-206,Gas Limit and Looping Vulnerability may cause Transactions to  fail due to gas limits.,validation-206,"Insufficient proof, also speculate on how other contracts utilize funcitonalities",Unsatisfactory,,33,:robot:_16_group
validation-181,Reentrancy vulnerability that can lead to substantial financial loss ,validation-181,"Dispatch is meant to invoked within the AggregateRouter, where there is an isNotLocked modifier that serves as reentrancy protection. This issue also lacks sufficient proof that an exploit is possible",Unsatisfactory,,33,:robot:_26_group
validation-252,No way for governance to properly update `feeProtocolNum` and `feeProtocolDen`,validation-252,,Satisfactory,,35,:robot:_primary
validation-207,Lack of Input validation may result in erroneous execution or command handling failure,validation-207,"Insufficient proof, also speculate on how contracts utilize funcitonalities",Unsatisfactory,,35,:robot:_00_group
validation-152,swap function lacks parameter for controlling slippage,validation-152,"Swaps are meant to be executed via the `AggregateRouter` as evident by the [check](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L560-L562), in which slippage is checked within the `V3SwapRouter.sol` appropriately",Unsatisfactory,,35,:robot:_49_group
validation-107,Lack of `address(0)` in the `KatanaGovernance::_setFactory` function,validation-111,,Satisfactory,,36,:robot:_10_group
validation-188,Reentrancy vulnerability causing unexpected behavior or altering the state of the contract in an unintended way.,validation-188,"Insufficient proof, also speculate on how contracts utilize funcitonalities ",Unsatisfactory,,36,:robot:_26_group
validation-74,Wrong init code hash,validation-74,There is no issue with utilizing a different init code hash as long as it is consistent with previously created token pairs. #151 is also invalid because the warden is referring to a testnet deployment of the contract `KatanaV2LibraryTestnet.sol` which is [OOS of this contest](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#files-out-of-scope),Unsatisfactory,,36,:robot:_15_group
validation-199,Direct ETH sending could lead to loss of funds sent to the contract mistakenly.,validation-27,,Unsatisfactory,,37,:robot:_21_group
validation-127, Price Manipulation Vulnerability in `PoolInitializer` Due to `sqrtPriceX96` Dependency,validation-102,,Satisfactory,,38,:robot:_03_group
validation-113,"Unexpected Zero-Fee Transactions: Since the fee amount is zero, transactions or pools using this fee setting might execute without any fees. This could result in lost revenue, particularly if the contract is intended to generate income through these fees.",validation-113,There is no indication that zero-fee pools cannot be allowed,Unsatisfactory,,38,:robot:_09_group
validation-104,Use of slot0 which is extremely manipulatable,validation-102,,Satisfactory,,39,:robot:_03_group
validation-32,Incorrect refund calculation in V3Migrator contract,validation-32,"This looks invalid, the full amount sent is burned [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/V3Migrator.sol#L42) based on `liquidityToMigrate`,  so any remaining tokens still existing in v1 should be refunded to user and the computation seems correct.",Satisfactory,,39,:robot:_primary
validation-126,Optimizer Bug in Low-Level Calls for Solidity Versions < 0.8.14,validation-126,"Insufficient proof and description, simply states the following without specifying context of impact to protocol. ' In this case, if the optimizer mistakenly removes memory operations deemed unnecessary, subsequent calls relying on these values may operate on outdated data, potentially leading to erroneous behavior or exploits.'",Unsatisfactory,,39,:robot:_primary
validation-178,Usage of slot 0 to get sqrtPriceLimitX96 can be easily manipulated,validation-102,,Satisfactory,,40,:robot:_03_group
validation-198,"Lack of access control leading to potential unauthorized actions like token transfers, swaps, or other sensitive operations.",validation-198,There is no issue with execution being permisionless. It is the reponsibility of users to enter relevant inputs to perform the necessary actions.,Unsatisfactory,,40,:robot:_23_group
validation-12,Number of NFT positions mintable are limited due to the data type used for tracking the next token id,validation-126,"This is the same exact implementation as [uniswapV3](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L64-L66). 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Unsatisfactory,,40,:robot:_primary
validation-250,Wrong and unexpected parameters passed to constructor in `KatanaV3PoolProxy`.,validation-106,,Satisfactory,,41,:robot:_primary
validation-145,Reentrancy Vulnerability in swap Function of KatanaV3Pool.sol,validation-204,,Unsatisfactory,,41,:robot:_01_group
validation-231,KatanaGovernance::_isAuthorized function allows user to perform action even after expiry time has passed.,validation-116,,Satisfactory,,43,:robot:_18_group
validation-57,Leftover ETH by the previous liquidator provider might be stolen by another liquidator provider. ,validation-98,,Satisfactory,,43,:robot:_primary
validation-147,Reentrancy Vulnerability in multicall Function of KatanaInterfaceMulticall.sol,validation-147,`KatanaInterfaceMulticall` is OOS of this contest,Unsatisfactory,,43,:robot:_26_group
validation-129,Missing Token Order Check in KatanaV3PoolDeployer.deploy(),validation-129,This check is performed in  `KatanaV3Factory.sol` as seen [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Factory.sol#L80-L82),Unsatisfactory,,43,:robot:_primary
validation-115,Permission denied by frontrunning permit,validation-115,,Satisfactory,,44,:robot:_53_group
validation-148,Missing Fee Parameter in pairFor Function Leads to Incorrect Pair Address Calculation,validation-148,,Satisfactory,,45,:robot:_primary
validation-255,Beacon is not showed up as a proxy to block explorers or can be set any contract's address as beacon,,,Unsatisfactory,,45,:robot:_primary
validation-116,Wrong implementation of accesss control for KatanaGovernance._authorized(),validation-116,,Satisfactory,,46,:robot:_primary
validation-71,Lack of protection against multiple initialisations in the constructor of the `KatanaV3Factory` contract,validation-71,"Invalid, known issue [L-17](https://github.com/code-423n4/2024-10-ronin/blob/main/4naly3er-report.md#l-17-upgradeable-contract-not-initialized). Also this is not compulsory as long as the admin run an appropriate transaction/script that ensures initialization of an upgraded factory contract",Unsatisfactory,,46,:robot:_primary
validation-2,"Payments.sol#pay() should check ""value"" if (token == Constants.ETH)",validation-2,"Insufficient quality. Additionally, the [value is cached here](https://github.com/ronin-chain/katana-operation-contracts/blob/27f9d28e00958bf3494fa405a8a5acdcd5ecdc5d/src/aggregate-router/base/Dispatcher.sol#L106), so there is no need to check value",Unsatisfactory,,46,:robot:_primary
validation-130,Missing Token Existence Check in `NonfungibleTokenPositionDescriptor.tokenURI(),validation-130,"Likely OOS, UniswapV3 utilizes same design as seen [here](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungibleTokenPositionDescriptor.sol#L48-L93). Additionally, it will have no impact on core contract functionalities. 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3.'",Unsatisfactory,,47,:robot:_primary
validation-101,Missing `address(0)` check in the `Payments::pay` function.,validation-101,,Satisfactory,,48,:robot:_primary
validation-108,Lack of tokens check in the `KatanaGovernance::createPair` function,validation-108,"Checks would be implemented within `v2Factory.sol`, see similar checks in uniswapv2 factory [here](https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Factory.sol#L24-L26)",Unsatisfactory,,48,:robot:_primary
validation-265,Malicious Pool Deployment with Create2: Address Collision,validation-265,"This is essentially a non-issue, if the user wants to deploy the pool for another user, there is no DoS here since the outcome is acheived and the original user could arguably have spent less gas from the revert.",Unsatisfactory,,49,:robot:_37_group
validation-84,Expired Accounts Continue To be Authorized,validation-116,,Satisfactory,,50,:robot:_18_group
validation-246,"Wrong Implementation, `KatanaV3Factory` never be initialized.",validation-106,,Satisfactory,,51,:robot:_100_group
validation-161,KatanaV3Pool.sol cannot initializeImmutables,validation-106,,Satisfactory,,51,:robot:_04_group
validation-72,Use of `slot0` to get `sqrtPriceLimitX96` can lead to price manipulation.,validation-102,,Satisfactory,,51,:robot:_03_group
validation-11,TokenURI generation NFT position is buggy,validation-11,"There is no issue here, see the identical uniswap implementation [here](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungibleTokenPositionDescriptor.sol#L35-L45). The length will increment to 5, not 4, there is no issue here",Unsatisfactory,,51,:robot:_08_group
validation-167, Insufficient Return Check for createPool in createAndInitializePoolIfNecessary Function,validation-167,This is checked within the OZ Create2.sol contract when `deploy` is called [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/utils/Create2.sol#L41),Unsatisfactory,,53,:robot:_69_group
validation-62, The token get burnt too early when collecting the fee.,validation-62,"The reason the check is not required is because `tokensOwed0` and `tokensOwed1` will always default to zero after a collect call. In [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/NonfungiblePositionManager.sol#L390-L393), we assign the current full amount of `tokensOwed0` and `tokensOwed1` if it does not exceed uin128.max determined by the amount0Max and amount1Max flags as seen [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/NonfungiblePositionManager.sol#L354-L356) (which in itself is highly unrealistic). As such when the subsequent full decrementation happens [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/NonfungiblePositionManager.sol#L407), `position.tokensOwed0` and `position.tokensOwed1` will default to zero",Unsatisfactory,,53,:robot:_30_group
validation-78,Address Collision Can Cause Stolen Funds,validation-51,,Satisfactory,,54,:robot:_37_group
validation-256,Users at Risk of Price Manipulation Due to Absence of Liquidity Thresholds and Whitelisting,validation-256,It doesn't make sense to restrict the amount of liquidity during pool creation. It is users responsibility to decide which pools they are willing to interact with. This also has the exact same implementation as Uniswap as seen [here](https://github.com/Uniswap/v3-core/blob/main/contracts/UniswapV3Factory.sol#L35-L51),Unsatisfactory,,54,:robot:_02_group
validation-254,Potential Loss of Tokens Due to Incomplete Collection Check Before Burning Position,validation-62,,Unsatisfactory,,54,:robot:_primary
validation-110,Type mismatch in the `AuthorizationLib::checkPair` function,validation-110,See [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/external/interfaces/IKatanaGovernance.sol#L169),Unsatisfactory,,54,:robot:_22_group
validation-82,Improper Handling of Negative Token Amounts in mint Function (Casting Signed Integers to Unsigned Integers),validation-82,"The values returned by functions within `SqrtPriceMath` called by `_modifyPosition` will always return unsigned ints, so this is a non-issue.",Unsatisfactory,,54,:robot:_primary
validation-133,Expired Accounts Retain Access Due to Flawed Expiry Validation in Authorization Logic,validation-116,,Satisfactory,,55,:robot:_18_group
validation-100,OOG / unexpected reverts due to incorrect usage of staticcall.,validation-100,"`balance0` is a view function, there is no state change, it is simply to retrieve the balance of token0 within the pool.",Unsatisfactory,,55,:robot:_primary
validation-146,Reentrancy Vulnerability in multicall Function of Multicall.sol,validation-146,Multicall.sol is OOS of this contest,Unsatisfactory,,57,:robot:_26_group
validation-259,Potential overestimation of liquidity,validation-121,,Satisfactory,,58,:robot:_89_group
validation-132,amount of token minted by a user is not updated,validation-132,This is done via `addLiquidity` which eventually calls `_modifyPosition` to track the users minted position,Unsatisfactory,,58,:robot:_51_group
validation-42,The `KatanaV3Pool.initializeImmutables` Function is Prone to Denial of Service (DoS) Attacks,validation-106,,Satisfactory,,60,:robot:_primary
validation-14,"immutable variables are not initialised, breaks functionality",validation-106,,Satisfactory,,60,:robot:_04_group
validation-19,"Fixed addresses for USDC, WETH, and WBTC in `NonfungibleTokenPositionDescriptor` contract can lead to misbehavior in the contract's logic, causing failures or inaccuracies in metadata generation",validation-19,The only chain the contracts are deployed on is the Ronin chain as noted [here](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#general-questions),Unsatisfactory,,62,:robot:_primary
validation-208,"Unvalidated `msg.value` in `AggregateRouter::execute()` Allows Unauthorized `WRAP_ETH` and `UNWRAP_WETH` Operations, Potentially Leading to Contract Fund Drain",validation-208,"Likely QA/informational, multicall with sweep/pay can likely be utilized. ",Satisfactory,,63,:robot:_50_group
validation-143,require nextId to be zero will always revert due to nextId already initialized to 1,validation-143,"At most Gas issue since those variables are already appropriately initialized, so no issues here since `initialize` won't be required to be called again.",Satisfactory,,63,:robot:_primary
validation-157,Reentrancy can lead to flash loan attack ,validation-204,,Unsatisfactory,,64,:robot:_01_group
validation-70,Lack of Event Emission After Tick Updates in Tick.sol,validation-70,Tick.sol is OOS of this contest. Additionally the upper level contracts utilizing the library will have the appropriate vents.,Unsatisfactory,,64,:robot:_primary
validation-253,slot0 Reliance in swap Allows Price Manipulation,validation-102,,Satisfactory,,66,:robot:_03_group
validation-169,V3SwapRouter.V3SwapExactOutput() has the wrong implementation since it applies the ,validation-169,,Satisfactory,,67,:robot:_19_group
validation-106,`initialize` will never execute in `KatanaV3Factory` and `KatanaV3Pool`,validation-106,,Satisfactory,,67,:robot:_100_group
validation-75,Functions in AggregateRouter dont allow reverts,validation-75,,Satisfactory,,69,:robot:_primary
validation-220,Pool ID Overflow in cachePoolKey Can Cause Mapping Collisions and System Inconsistency,validation-220,"This is highly unrealistic, there isn't even enough tokens existing out there to create that many pools to cause an overflow of uint80 max that means > 1208925819614629174706175  would have existed. Additionally, uniswap retains a similar design as seen [here](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L122C40-L122C51), with the same [solidity version](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L2) ",Unsatisfactory,,69,:robot:_primary
validation-25,Potential loss of burned liquidity tokens in partial collections,,,Unsatisfactory,,69,:robot:_30_group
validation-4,Overflow can lead to liquidity replacement,validation-220,,Unsatisfactory,,70,:robot:_primary
validation-249,Lack of Emergency Pause Mechanism in KatanaV3Pool,validation-249,"Not required, speculate on the need of a emergency mechanism. Additionally [uniswap does not incorporate a pause mechanism as well](https://github.com/Uniswap/v3-core/blob/main/contracts/UniswapV3Pool.sol)",Unsatisfactory,,72,:robot:_primary
validation-23,Incorrect use of `CREATE2` in `KatanaV3PoolDeployer` contract,validation-265,,Unsatisfactory,,72,:robot:_37_group
findings-3,Authorisation check for minting positions for V3 pools in the `nfpManager` is pointing to the v2Factory,findings-3,,Satisfactory,,73,
validation-168,Mismatch in Pool Proxy Initialization Code Hash,validation-168,"The POOL_PROXY_INIT_CODE exists in the KatanaV3PoolBeacon contract, not the KatanaV3PoolProxy contract",Unsatisfactory,,73,:robot:_15_group
validation-73,Issues with unsafe ERC20 operations,validation-213,,Unsatisfactory,,76,:robot:_34_group
validation-237,Address Collision Attack Using CREATE2 in Katana V3 Pool Deployment,validation-51,,Satisfactory,,77,:robot:_37_group
validation-117,NonfungiblePositionManager.increaseLiquidity() has missed the ```isAuthorizedForToken(params.tokenId)``` modifier.,validation-117,"The issues #9, #93, #24 and #76 are dupes of 117, but the impact described is insufficient as it did not talk about the potential DoS of burning. Adding liquidity for other users will only benefit the original LP. Uniswap utilizes the same design as seen [here](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L198-L254), so I believe those should be considerered those QA/invalid.",Satisfactory,,79,:robot:_07_group
validation-98,"When minting or increasing liquidity through NonfungiblePositionManager, excess ETH sent to the contract is not refunded",validation-98,"This might be OOS, since uniswap has the same exact design as seen [here](https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/PeripheryPayments.sol#L52-L69). Additionally, if the user utilizes a multicall, this would be a non-issue. 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Satisfactory,,80,:robot:_74_group
validation-83,LPholders can be prevented from burning their position NFTs,validation-117,,Satisfactory,,82,:robot:_07_group
validation-99,"Possibility of underflow without revert in the `V2SwapRouter::_v2Swap` function, which can be exploited by a malicious user to steal funds.",,,Unsatisfactory,,82,:robot:_primary
validation-159,AggregateRouter doesn't refund unspent ETH after swapping,validation-208,,Unsatisfactory,,84,:robot:_primary
validation-105,"KatanaGovernance::createPair(), Any unauthorized account can create pair with any expired token due to logical error in KatanaGovernance::_isAuthorized() function.",validation-116,,Satisfactory,,85,:robot:_18_group
validation-170,"katanaV3SwapCallback and _swap() do not deal with the recurisve base case of empty path well, leading to non-function for v3SwapExactOutput.",validation-170,,Satisfactory,,86,:robot:_primary
validation-51,"LiquidityManagement.katanaV3MintCallback() is subject to address collision attack, allowing an attacker to steal funds from users who  give approvals to the NonfungiblePositionManager.",validation-51,"Likely invalid and OOS per [contest details](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues). This is likely a known uniswapv3 issue. 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Satisfactory,,86,:robot:_primary
validation-153,Users may lose funds due to missing access control in KatanaV3Pool.sol::burn,validation-153,"Same design as uniswapV3, users are not expected to directly call the burn function without going through the NonfungiblePositionManager",Unsatisfactory,,87,:robot:_02_group
validation-114,Use of the `TransferHelper::safeApprove` method in the `V3Migrator::migrate` function without resetting the allowance to 0.,validation-114,"If there are unspent allowances, it will be subsequently cleared as seen [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/V3Migrator.sol#L70-L86)",Unsatisfactory,,87,:robot:_primary
validation-119,Liquidity providers can be restricted from burning their positions.,validation-117,,Satisfactory,,88,:robot:_07_group
validation-26,Missing Events on Important State Changes,validation-26,"The above mentioned contracts are not meant to be called directly, the higher level Router contracts will have the appropriate events in place.",Unsatisfactory,,88,:robot:_primary
validation-121,"Oracle.transform() calculates the wrong secondsPerLiquidityCumulativeX128 in the transform() functions during zero liquidity period, which affects the results for  functions in KatanaV3Pool.sol.",validation-121,"This might be OOS, since uniswap has the same exact design as seen [here](https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Oracle.sol#L30-L45). ' All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Satisfactory,,90,:robot:_89_group
validation-56,Lack of Access Control in `KatanaV3Factory::initialize` function  allows anyone to configure the crucial parameters,validation-30,,Unsatisfactory,,90,:robot:_107_group
validation-216,Initialization Deadlock in KatanaV3Pool Due to Conflicting Constructor and initializeImmutables Logic,validation-106,,Satisfactory,,92,:robot:_04_group
validation-63,User can bypass the authorization check in NonfungiblePositionManager.sol#mint via migration,validation-63,"Expected design per contest details as seen [here](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues): 'If a liquidity pool (pair of tokens) is already open for liquidity provision on Katana V2, liquidity providers are expected to be able to migrate their liquidity to the corresponding pool on Katana V3 when it is created, without being restricted by the authorization function of the Governance.'",Unsatisfactory,,93,:robot:_44_group
validation-53,Improper Initialization Logic in KatanaV3Factory Causes Failure/Dos in calling `KatanaV3Factory.sol::initialize`,validation-106,,Satisfactory,,97,:robot:_100_group
validation-10,Oracle Miscalculation During Zero Liquidity Periods Leads to Inaccurate AMM Data,validation-121,,Satisfactory,,98,:robot:_primary
validation-58,KatanaV3Factory::enableFeeAmount improper validation could lead to issues,validation-58,There is no indication that zero-fee pools cannot be allowed,Unsatisfactory,,98,:robot:_09_group
validation-160,Anyone can call execute and run commands to steal funds,validation-160,There is no issue with execution being permisionless. It is the reponsibility of users to enter relevant inputs to perform the necessary actions with or without a multicall. The router contract is not expected to hold any funds.,Unsatisfactory,,99,:robot:_50_group
validation-248,ETH Transfer exploit via calldata manipulation,validation-248,"Routers are not supposed to hold funds, this is present likely to transfer excess funds present during swaps",Unsatisfactory,,102,:robot:_primary
validation-18,Denial of Service (DoS) via excessive tick crossing in ` KatanaV3Poll` contract,validation-18,There is no proof that OOG can occur with the swap shown.,Unsatisfactory,,103,:robot:_36_group
validation-95,"Oracle's Transform Function Fails to Handle Zero Liquidity, Leading to Data Inaccuracy",validation-121,,Satisfactory,,111,:robot:_89_group
validation-94,Improper Initialization of Observation Array in Oracle Library Leads to Data Integrity Issues,,,Unsatisfactory,,115,:robot:_primary
validation-258,Gas Limit Vulnerability in src/core/KatanaV3PoolProxy.sol,validation-258,"This is a non-issue, since `parameters` is retrieved from the V3Deployer contract which is set when a new pool is created via `KatanaV3Factory.createPool()`",Unsatisfactory,,121,:robot:_primary
validation-225,Missing Minimum Liquidity Checks in _modifyPosition Exposes Pool to Price Manipulation,,,Unsatisfactory,,122,:robot:_02_group
validation-112,NonFungiblePositionManager Is Liable To Underflow,validation-112,,Satisfactory,,125,:robot:_30_group
validation-61,Authorization function of the Governance can still restrict user from migrating v2 liquidity to v3 liquidity,validation-61,,Satisfactory,,125,:robot:_47_group
validation-97,Front-running Vulnerability in swap Function of KatanaV3Pool.sol,validation-97,As long as an appropriate slippage and deadline is present to help users avoid front-running attacks,Unsatisfactory,,126,:robot:_primary
validation-118,KatanaV3Pool uses custom fees whereas KatanaV2Library.getAmountOut and getAmountIn use hardcoded fees,validation-118,"This is as per design [based on READ.ME](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#key-changes-from-uniswap-v3): 'Customizable Protocol Fee Tiers: Katana v3 allows for flexible fee structures with multiple protocol fee tiers, improving adaptability across different market conditions and asset types.'",Unsatisfactory,,128,:robot:_primary
validation-17,"Fee growth calculation errors in `KatanaV3Pool` Contract will result in liquidity providers receiving more or fewer fees than they are entitled to, leading to profit imbalances and undermining the integrity of the pool",validation-17,,Unsatisfactory,,128,:robot:_25_group
validation-16,"Price manipulation via flash loans in `KatanaV3Pool` contract allow attackers to borrow large amounts of tokens without collateral for a single transaction, destabilizing the pool's price",validation-16,There are slippages in place to prevent price manipulation afftercting swaps,Unsatisfactory,,131,:robot:_01_group
validation-20,"Missing slippage protection for migrated liquidity allows liquidity providers to suffer from significant token loss, especially during periods of price volatility in `V3Migrator` contract",validation-20,The slippages is present within the `params` input and used [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/V3Migrator.sol#L62-L63),Unsatisfactory,,132,:robot:_13_group
validation-9,Unauthorized Liquidity Increase in `NonfungiblePositionManager`,validation-117,,Satisfactory,,133,:robot:_primary
validation-223,Unsafe Parameter Decoding in Dispatcher Contract Leads to Potential Data Corruption,,,Unsatisfactory,,137,:robot:_primary
validation-238,"Katana V3 collect Function Breaks NFT Security Model, Allows Fee Collection After Transfer",,,Unsatisfactory,,138,:robot:_primary
validation-22,"Front-running in `getAmountOut` function allow an attacker to observe large pending transactions on the blockchain, manipulate the pool’s reserves by making their own transactions, and sandwich the victim's trade",validation-22,"As long as an appropriate slippage is set, this is a non-issue",Unsatisfactory,,138,:robot:_48_group
validation-93,Unauthorized Liquidity Manipulation in NonfungiblePositionManager Contract Due to Missing Access Control,validation-117,,Satisfactory,,141,:robot:_07_group
validation-122,"KatanaV3Pool.observe() will likely revert when the current timestamp wraps around the 2**32 boundary, and after time >= 2**32, observations before < 2**32 all become not available to observe,",validation-122,"Could be OOS, same exact implementation in uniswap as seen [here](https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Oracle.sol#L260): 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Satisfactory,,143,:robot:_primary
validation-262,Suboptimal Array Allocation in Mixed Route Quoter,,,Unsatisfactory,,149,:robot:_primary
validation-261,Array Index Misalignment in MixedRouteQuoterV1's Mixed Route Quotes,,,Unsatisfactory,,151,:robot:_06_group
validation-217,positions Function in NonfungiblePositionManager Returns Potentially Invalid Tick Values,,,Unsatisfactory,,151,:robot:_primary
validation-92,Precision Loss in Oracle's Tick Cumulative Calculation Due to Integer Division Order ,validation-120,,Satisfactory,,153,:robot:_29_group
validation-120,Divide-before-multiplication loss in Oracle.observseSingle() leads to inaccurate results for tickCumulative for the KatanaV3Pool contract.,validation-120,"UniswapV3 has the same exact implementation as seen [here](https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/Oracle.sol#L277), so this might be OOS per contest details [here](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues): 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Satisfactory,,155,:robot:_primary
validation-264,Infinite Loop Risk in MixedRouteQuoter,validation-264,Known issue [Nc-6](https://github.com/code-423n4/2024-10-ronin/blob/main/4naly3er-report.md#nc-6-dangerous-whiletrue-loop),Unsatisfactory,,159,:robot:_primary
validation-229,Precision Loss in Katana V3 Fee Calculation Impacts Small Positions and Low-Value Transactions,,,Unsatisfactory,,162,:robot:_25_group
validation-226,Conditional Oracle Updates in Katana V3 _modifyPosition Enable Stale Data and Price Manipulation,,,Unsatisfactory,,166,:robot:_primary
validation-219,Missing Command Boundary Validation in Dispatcher Contract Can Lead to Unexpected Execution Paths,,,Unsatisfactory,,184,:robot:_primary
validation-234,Missing Slippage Protection in Katana V3 mint Function Exposes Users to Sandwich Attacks,validation-234,"Slippage is present in the NonfungiblePositionManager.mint, the function is not expected to be called directly",Unsatisfactory,,189,:robot:_17_group
validation-227,Slippage Protection and Price Manipulation Checks Missing in Katana V3 _modifyPosition,validation-227,"Slippage is present in the router contracts that will eventually invoke pool actions, the functions are not expected to be called directly",Unsatisfactory,,189,:robot:_17_group
validation-240,tx.origin Usage in Katana V3 Swap Function Enables Unauthorized Access,,,Unsatisfactory,,191,:robot:_28_group
validation-239,Potential Memory Exhaustion Vulnerability in Katana V3 Swap Function During Large Swaps,,,Unsatisfactory,,194,:robot:_primary
validation-233,Race Condition in Katana V3 mint Function Allows Balance Manipulation via Flash Loans,,,Unsatisfactory,,197,:robot:_01_group
validation-242,Zero Liquidity Manipulation in SwapMath Impacts Katana V3 Prices,,,Unsatisfactory,,198,:robot:_02_group
validation-251,Integer Overflow in /src/periphery/NonfungibleTokenPositionDescriptor.sol,validation-251,"The chainId is not arbitrary, it retrieves it from the `ChainLib`, and will only represent the ronin chainId given the contracts are only deployed on the [Ronin chain](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#general-questions)",Unsatisfactory,,201,:robot:_primary
validation-179,Initialization Logic Vulnerability exploitable in katana-v3-contracts-03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3PoolBeacon.sol,validation-179,"This is OOS per contest [details](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues): 'Centralization risk. Sky Mavis is responsible for maintaining the Katana V3 contracts and will able to upgrade the contract if necessary, as well as specify additional fee tiers.'",Unsatisfactory,,201,:robot:_primary
validation-171,Unchecked/Unvalidated External Call Return Values leads to ,validation-171,"This is OOS per contest [details](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues): 'Centralization risk. Sky Mavis is responsible for maintaining the Katana V3 contracts and will able to upgrade the contract if necessary, as well as specify additional fee tiers.'",Unsatisfactory,,208,:robot:_05_group
validation-193,Integer overflow in NonFungibleTokenPositionDescriptor.sol ,validation-193,"This can never happen, since all the return values are constant and will never be greater than uint256.max",Unsatisfactory,,216,:robot:_27_group
validation-218,Public Exposure of Position Data in positions() Enables Precise MEV Extraction,validation-218,"This is a non-issue, since there are slippages in place to prevent sandwich attacks.",Unsatisfactory,,217,:robot:_primary
validation-236,Rebase Vulnerability in Katana V3 mint Function Can Cause Incorrect Liquidity Provisioning,validation-236," Known assumption as seen [here](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#assumptions): 'The token balance of an address can only change due to a call to transfer by the sender or transferFrom by an approved address, i.e. rebase tokens and interest bearing tokens are excluded.'",Unsatisfactory,,221,:robot:_primary
,,,,,,,
,,,,,,,
validation-266,Lack of Price Impact & Slippage Protection in quoteExactInput,validation-266,,Satisfactory,,249,:robot:_primary
validation-232,Inefficient Tick Update Mechanism in Katana V3 Causes Excessive Gas Costs for Multi-Range Positions,validation-232,"Extremely vague issue, insufficient proof and quality",Unsatisfactory,,258,:robot:_primary
validation-241,no check on the liquidity holder ,validation-241,"The function is gated to the caller `msg.sender`  , users cannot arbitrarily invoke migration for other users",Unsatisfactory,,17,:robot:_primary
validation-211,lack safeApprove before call TransferHelper.safeTransferFrom,validation-211,"Not required, approvals are provided externally.",Unsatisfactory,,17,:robot:_primary
validation-210,`migrate()` lack slippage control,validation-210,Slippage is present when `INonfungiblePositionManager.mint` is called and eventually checked within `LiquidityManagement.addLiquidity`,Unsatisfactory,,20,:robot:_primary
validation-162,A call to pool.collect from `NonFungiblePositionManager.collect` will be returned,validation-162,,Unsatisfactory,,23,:robot:_primary
validation-144,eth being struck in AggregateRouter.,validation-27,,Unsatisfactory,,25,:robot:_primary
validation-139,check for token in checkPair ,validation-139,This is not required as the check exists in `checkPool` [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Factory.sol#L80),Unsatisfactory,,26,:robot:_primary
validation-142,Common tokens such as WETH9 work differently on chains such a Blast which isn't taken into account during transfer calls,validation-142,The only chain the contracts are deployed on is the Ronin chain as noted [here](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#general-questions),Unsatisfactory,,27,:robot:_primary
validation-172,slot0 is easy to manupilate,validation-102,,Satisfactory,,31,:robot:_primary
validation-125,Downcasting Issue in Protocol Fee Calculation,validation-125," [Known consideration](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#assumptions). It is unrealistic for fees to every reach that kind of state given totalSupply limit assumption. Additionally, fees can always be collected before this levels are reached. 'The total supply of any token does not exceed 2128 - 1, i.e. type(uint128).max.'",Unsatisfactory,,33,:robot:_primary
validation-164,wrong implement of initializeImmutables in KatanaV3Pool,validation-164,The check is correct to prevent reinitialization once factory address has been set,Unsatisfactory,,36,:robot:_04_group
validation-163,Balance Verification in mint Function Leading to Token Minting Failures,validation-163,"There is no issue here, <= is used because the `balance0Before` and `balance1Before` was the previously cached balances before the tokens were transferred to the pool by LP, the check is working correctly. If we use >=, it can potentially revert for FOT tokens. Same exact implementation as [UniswapV3Pool.sol](https://github.com/Uniswap/v3-core/blob/main/contracts/UniswapV3Pool.sol#L483-L484)",Unsatisfactory,,38,:robot:_101_group
validation-47,Users may perform trades or provide liquidity based on the assumption that the pool has a valid price.,validation-102,,Satisfactory,,42,:robot:_03_group
validation-48,The `totalFeeGrowth0` and `totalFeeGrowth1` variables are not updated along with their corresponding `feeGrowthGlobal0X128` and `feeGrowthGlobal1X128` variables.,validation-48,"There are no such state variables since protocol fees are immediately transferred directly to the treasury as een [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L738-L740), as per design mentioned in [contest details](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#main-invariants). 'Protocol fees will be directly transferred to the treasury without fee-collecting operations needed'",Unsatisfactory,,44,:robot:_primary
validation-45,"If `feeProtocolNum` equals `feeProtocolDen`, it would mean 100% of the fees go to the protocol, which is likely unintended.",validation-45,"Note, this are not present in the automated finding report for known issues. Grouping all input validation issues together. They should all likely be at most QA and argubly invalid based on the following [READ.ME information](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#automated-findings--publicly-known-issues): ' Centralization risk. Sky Mavis is responsible for maintaining the Katana V3 contracts and will able to upgrade the contract if necessary, as well as specify additional fee tiers.'",Satisfactory,,45,:robot:_09_group
validation-166,use safemint instead of mint.,validation-166,"OOS, given uniswapV3 utilizes the same exact logic as seen [here](https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L156): 'All public known issues, including public audit reports of Uniswap V3 that affect Katana V3'",Unsatisfactory,,47,:robot:_primary
validation-149,Reentrancy Risk in the migrate Function,validation-149,"Lack sufficient proof. Additionally, the migrator contract is not expected to hold funds since appropriate refunds will be given.",Unsatisfactory,,47,:robot:_primary
validation-50,Missing Authorization Check in Flash Loan Function,validation-50,"The subsequent [checks here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L774-L775) enforces that the user MUST have returned the flashloaned funds + the fees within the flashloan call `katanaV3FlashCallback` callback, if not the call will revert",Unsatisfactory,,47,:robot:_primary
validation-124, Zero-Fee Pool Vulnerability in `KatanaV3Factory`,validation-124,There is no indication that zero-fee pools cannot be allowed,Unsatisfactory,,49,:robot:_09_group
validation-154,wrong implement of nativeCurrencyLabel,validation-11,,Unsatisfactory,,53,:robot:_primary
validation-46,"Liquidity providers may face difficulties when managing their positions, as the inconsistent tick state can affect their ability to add or remove liquidity correctly.",,,Unsatisfactory,,54,:robot:_primary
validation-151,Wrong init code hash,validation-74,,Unsatisfactory,,55,:robot:_primary
validation-49,"Incorrect accounting of total fees collected by the pool, leading to discrepancies in financial records and reporting.",validation-49,"There are no such state variables since protocol fees are immediately transferred directly to the treasury as een [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L738-L740), as per design mentioned in [contest details](https://github.com/code-423n4/2024-10-ronin?tab=readme-ov-file#main-invariants): 'Protocol fees will be directly transferred to the treasury without fee-collecting operations needed'",Unsatisfactory,,55,:robot:_primary
validation-40,Insufficient Liquidity Check in Flash Loan Function,validation-40,"This is essentially a non-issue, either way, it would revert even if an additional check is added due to insufficient funds available for flashloan",Unsatisfactory,,55,:robot:_01_group
validation-7,`totalPools` variable will not accurately reflect the number of pools created.,validation-7,There is no `totalPools` state variable,Unsatisfactory,,57,:robot:_primary
validation-8,`setTreasury` allows setting treasury to the current address,validation-8,Known issue [NC-11](https://github.com/code-423n4/2024-10-ronin/blob/main/4naly3er-report.md#nc-11-lack-of-checks-in-setters),Unsatisfactory,,58,:robot:_primary
validation-177,Protocol Fee Ratio Bypass Leading to Excessive Fee Extraction,validation-45,,Satisfactory,,59,:robot:_09_group
validation-33,`initialize()` function lacks a check to ensure that the provided `sqrtPriceX96` is non-zero before assigning it to `slot0.sqrtPriceX96`,validation-45,,Satisfactory,,59,:robot:_03_group
validation-175,Fee Parameter Manipulation Through Race Condition in KatanaV3Factory,validation-175,"There seem to be some missunderstanding of how transactions work. Once `enableFeeAmount`, the transaction has to be completed before the updates are completed, and thus is atomic, so this is a non-issue.",Unsatisfactory,,62,:robot:_09_group
validation-38,Unchecked Liquidity Burn Allows Excessive Token Withdrawal,validation-38,Users cannot abitrarily burn tokens from other LPs since the call is gated to the caller `msg.sender`.,Unsatisfactory,,64,:robot:_primary
validation-257,V3factory will fail to initialize because of a wrong check,validation-106,,Satisfactory,,68,:robot:_04_group
validation-6,Inaccurate `totalPools` Count,validation-6,There is no `totalPools` state variable.,Unsatisfactory,,68,:robot:_52_group
validation-268,Parameters mostly not checked for initializeImmutables function,validation-45,,Satisfactory,,69,:robot:_04_group
validation-44,Improper Validation of `tickSpacing` Parameter in `initializeImmutables` Function,validation-45,,Satisfactory,,70,:robot:_primary
validation-136,Handling External Calls to IERC20Metadata.decimals() Failing Silently,validation-136,"Seems at most low/QA, wrapper contract could be used? Also the contracts are only supported on ronin chain, which is unlikely for tokens to exhibit such a behavior.",Satisfactory,,72,:robot:_primary
validation-28,"Fee Growth Accumulation Bug: Instead of accumulating fees, the code overwrites the previous fee growth values.",validation-28,"The global fee tracker is already incremented [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L649) before assignment, this is a non-issue",Unsatisfactory,,72,:robot:_25_group
validation-29,Incorrect Balance Check in Swap Function Leads to Pool Imbalance,validation-29,The warden seemed to have attempted to change the smart contract logic to introduce a bug. There is no issue here if you check the correct affected lines of code [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L734),Unsatisfactory,,75,:robot:_49_group
validation-141,CREATE2` address collision during pool deployment allows for complete draining of the pool,validation-51,,Satisfactory,,77,:robot:_37_group
validation-176,Multiple Pool Creation Enables Liquidity Fragmentation and Market Manipulation,validation-176,"OOS. 'Centralization risk. Sky Mavis is responsible for maintaining the Katana V3 contracts and will able to upgrade the contract if necessary, as well as specify additional fee tiers.'",Unsatisfactory,,79,:robot:_primary
validation-5,Improper Token Address Validation in `createPool` Function,validation-5,"The check is not required, since no matter what, token0 will represent the zero address due to the assignment above.",Unsatisfactory,,83,:robot:_primary
validation-156,Katana Governance will never be able to initialize the V3factory because of a wrong check,validation-106,,Satisfactory,,84,:robot:_primary
validation-87,Pool Initialization with Extreme Prices Can Break Core Pool Mechanics,validation-45,,Satisfactory,,84,:robot:_11_group
validation-155,Change of Router in the Katana governance will cause all Calls from the new router to revert.,validation-155,"Not an issue, given the externnal  [`setAllowedActor`](https://github.com/ronin-chain/katana-operation-contracts/blob/27f9d28e00958bf3494fa405a8a5acdcd5ecdc5d/src/governance/KatanaGovernance.sol#L95-L97) can be subsequently invoked.",Unsatisfactory,,85,:robot:_primary
validation-85,Zero-Amount Flash Loans Not Prevented,validation-85,"There is no reason to invoke a zero amount flashloan, and there will be no impact, so arguably, there is no need to check for it.",Unsatisfactory,,87,:robot:_01_group
validation-86,Oracle Observation Array Size Mismatch with Maximum Cardinality,validation-86,"65535 creates a fixed array size that can hold 65535 elements that is indexed from 0-65534, no issue here",Unsatisfactory,,91,:robot:_14_group
validation-37,Manipulation of pool balances and pricing allows Borrowing Beyond Pool Balance,validation-37,"The subsequent [checks here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L774-L775) enforces that the user MUST have returned the flashloaned funds + the fees within the flashloan call `katanaV3FlashCallback` callback, if not the call will revert",Unsatisfactory,,91,:robot:_01_group
validation-36,Complete draining of the pool's assets in Flash function,validation-36,"The following statement is incorrect and misunderstands how modifiers work. The lock will only be reassigned after execution of the function logic. 'The lock modifier releases the lock (slot0.unlocked = true;) prematurely, before the flash function completes its execution.'",Unsatisfactory,,93,:robot:_01_group
validation-31,Inconsistent Fee Growth Accounting in Swap Function,validation-31,,Unsatisfactory,,94,:robot:_25_group
validation-224,Memory Array Length Manipulation Vulnerability in Whitelist Token Management,validation-224,"This is a view function to retrieve information of whitelisted tokens, there is no possible manipulation here.",Unsatisfactory,,95,:robot:_primary
validation-89,Users may receive incorrect amounts during swaps Protocol fees could be miscalculated,validation-89,,Unsatisfactory,,95,:robot:_02_group
validation-24,NonfungiblePositionManager has increaseLiquidity Function Missing Authorization Check,validation-117,,Satisfactory,,101,:robot:_07_group
validation-76,Missing authorization check in `increaseLiquidity` permits unauthorized liquidity addition,validation-117,,Satisfactory,,111,:robot:_07_group
validation-91,Unbounded Token Collection Can Lead to Unexpected Reverts,validation-91,It is correct to revert if the user attempt to collect more than intended tokens owed to them,Unsatisfactory,,112,:robot:_primary
validation-35,AggregateRouter has execute Function May Enter an Infinite Loop Under Certain Conditions,,,Unsatisfactory,,114,:robot:_54_group
validation-34,Inconsistent Liquidity State in Tick Updates,validation-34,,Unsatisfactory,,115,:robot:_110_group
validation-39,Use of unchecked arithmetic operations,validation-39,"The SafeCast library is utilized, so overflow is not possible",Unsatisfactory,,123,:robot:_primary
validation-90,Flash Loan State Manipulation via Reentrancy,validation-90,"The modifier `lock` serves as the reentrancy protection ,there is no issue here.",Unsatisfactory,,124,:robot:_01_group
validation-80,fee growth calculation in the swap function incorrectly handles the order of operations between protocol fee deduction and fee growth updates,,,Unsatisfactory,,133,:robot:_25_group
validation-221,Zero Denominator Vulnerability in Fee Protocol Parameter Validation,validation-45,,Unsatisfactory,,138,:robot:_primary
validation-81,Incorrect Liquidity Accounting During Position Burns,,,Unsatisfactory,,138,:robot:_02_group
validation-123,Cross-site scripting risk in NFT position descriptor due to insufficient token symbol validation,validation-123,"This is OOS and not a smart contract logic issue. Additionally, we have the same implementation in uniswapV3 as seen [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/periphery/libraries/NFTDescriptor.sol)",Unsatisfactory,,151,:robot:_primary
validation-137,Authorization Through tx.origin,validation-137,"No bypass is possible, even if the caller is spoofed, the calling context must be the router set in the katana governance contract with the appropriate logic",Unsatisfactory,,173,:robot:_primary
validation-79,Minting with Extreme Tick Values,validation-45,,Satisfactory,,194,:robot:_11_group
validation-88,Attacker can drain pool liquidity by manipulating balance checks,validation-88,"There is no issue here, <= can be used since it would mean the user has repaid the amount flashloaned + fees. The second point is incorrect since the balance of pool has been previously cached [here](https://github.com/ronin-chain/katana-v3-contracts/blob/03c80179e04f40d96f06c451ea494bb18f2a58fc/src/core/KatanaV3Pool.sol#L762-L763). See similar implementation in [UniswapV3Pool](https://github.com/Uniswap/v3-core/blob/main/contracts/UniswapV3Pool.sol#L802-L811)",Unsatisfactory,,196,:robot:_01_group
validation-173,use memory safe for assembly.,validation-173,"We shouldn't be arbitrarily utilizing memory safe functionalities without concrete proof, which the warden hasn't explained.",Unsatisfactory,,224,:robot:_primary